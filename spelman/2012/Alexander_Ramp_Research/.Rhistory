x <- read.FCS(file.name, column.pattern="-H")
x
(lines <- sample(100:500, 50))
y <- read.FCS(file.name, which.lines = lines)
y
library(flowViz)
plot(x)
plot(x,c("FL1-H", "FL2-H"))
plot(x, "FL1-H", breaks=256)
frames <- lapply(dir(system.file("extdata", "compdata", "data",
package="flowCore"), full.names=TRUE), read.FCS)
as(frames, "flowSet")
names(frames) <- sapply(frames, keyword, "SAMPLE ID")
fs <- as(frames, "flowSet")
fs
str(fs)
exprs(fs)
expr(fs)
fs@frames
fs@phenoData
fs@phenoData@data
str(frames)
head(freames)
head(frames)
phenoData(fs)
?pData
pData(phenoData(fs))
install.packages(new.packages())
?instal.packages
?install.packages
install.packages(pkgs=new.packages())
?new.packages
install.packages(pkgs=new.packages())
install.packages("~/Downloads/iFlow_2.6.0.tgz", repos = NULL)
library(iFlow)
source("http://bioconductor.org/biocLite.R")#
biocLite("iFlow")
library(iFlow)
biocLite("flowStats")
biocLite("iFlow")
library(iFlow)
install.pacages('igraph')
install.packages('igraph')
install.packages("igraph")
library(igraph)
help(package=igraph)
install.packages("igraphdata")
library(qvalue)
citation(qvalue)
citation()
install.packages("abcdeFBA")
help(pacage=abcdeFBA)
help(package=abcdeFBA)
install.packages("rjags")
install.packages("rJava")
help(package=rjags)
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
read.csv(textConnection(myCsv))
?getURL
library(RCurl)
install.packages("RCurl")
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
read.csv(textConnection(myCsv))
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
tb = read.csv(textConnection(myCsv))
tb
str(tb)
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv = ("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
head(tb)
str(tb)
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
str(tb)
head(tb)
str(tb)
head(tb)
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/pub?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c&single=true&gid=0&output=csv")
tb = read.csv(textConnection(myCsv))
str(tb)
head(tb)
str(tb)
hist(tb$Age)
source("http://bioconductor.org/biocLite.R")
biocLite("SNPlocs.Hsapiens.dbSNP.20111119")
biocLite("Biostrings")
biocLite("BSgenome")
for (i in 1:3) print (i)
for (i in 1:30) print (i)
for (i in 1:30) {
print (i, "do denature")
print (i, "do anneal")
print (i, "do elongation")
}
?pint
?print
for (i in 1:10) {
print (i)
print ("   do denature")
print ("   do anneal")
print ("   do elongation")
}
for (i in 1:25) {
print (i)
print ("   do denature")
print ("   do anneal")
print ("   do elongation")
}
for (i in 1:30) {
print (i)
print ("   do denature")
print ("   do anneal")
print ("   do elongation")
}
i=1
while ( i <= 3) {
print (i)
i = i + 1
}
i=0
while ( i <= 3) {
print (i)
i = i + 1
}
i=5
while ( i >= 3) {
print (i)
i = i - 1
}
x = 1.5;
if ((x<1)&(x>0)) {
print(" x is bw 0 and 1");
y = x;
} else {
print("x is not bw 0 and 1");
y = x / 3
}
x = -1;
if ((x<1)&(x>0)) {
print(" x is bw 0 and 1");
y = x;
} else {
print("x is not bw 0 and 1");
y = x / 3
}
x = 0.7;
if ((x<1)&(x>0)) {
print(" x is bw 0 and 1");
y = x;
} else {
print("x is not bw 0 and 1");
y = x / 3
}
x = c(5, 4, 3, 6, 10, 12)
fix(x)
if ( x == 0.5 ) {
print("50%");
}
x= -1;
if ( ! x<0 ) {
print("non-negative");
} else {
print("negative");
}
y = ifelse( x<0, -x, x ); # assign abosulte value of x to y
a function
x = c( 1,2,3,4);
x = c(5, 4, 3, 6, 10, 12)
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
y; #the last line, return y to the main program
}
take_even(x)
y = c();
i=1
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
y
i=2
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
y
i=3
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
i
y
x
i=4
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
i
x
y
x = c( 1,2,3,4);
x = c(5, 4, 3, 6, 10, 12)
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
y; #the last line, return y to the main program
}
y = take_even(x); # c(2,4)
fix(y)
z = take_even(x); # c(2,4);
fix(z)
w = take_even(1:10); #c (2,4,6,8,10)
fix(w)
u = -5:10;
v = take_even(u); # -4 -2  0  2  4  6  8 10
fix(v)
take_even(c(5,4,10,11, 100, -3, 9, 0, 3333, 5524234234))
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4 );
u = even_total( x );
fix(x)
x will be changed if the following line is run.
x = take_even(x)
fix(x)
install.packages("ncbi")
install.packages(c("geoR", "geoRglm"))
install.packages("GEOquery")
source("http://bioconductor.org/biocLite.R")#
biocLite("GEOquery")
biocLite()
install.packages("mvtnorm")
require(mvtnorm)
help(package=mvtnorm)
sigma <- matrix(c(4,2,2,3), ncol=2)
x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma)
colMeans(x)
var(x)
sigma <- matrix(c(1,0.5,0.5,1), ncol=2)
x <- rmvnorm(n=500, mean=c(0,0), sigma=sigma)
colMeans(x)
var(x)
View(x)
summary(lm(x[,1] ~ x[,2]))
sigma <- matrix(c(1,sqrt(0.5),sqrt(0.5),1), ncol=2)
View(sigma)
x <- rmvnorm(n=500, mean=c(0,0), sigma=sigma)
colMeans(x)
var(x)
summary(lm(x[,1] ~ x[,2]))
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
b = BStrig("Hello world")
require(Biostrings)
b = BString("Hello world")
b
str(b)
b[1]
b[1:5]
b[]
b[length(b):1]
help(stringDist)
setwd("~/Dropbox/shared.dropbox/students.dp/alexander_ramp_research")
lifespan = read.csv("lifespan.csv");
