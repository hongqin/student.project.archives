currentLive  = tot - deathCumulative
m =  deathFreq / currentLive;
#list( s=s, t=unique(my.data));
ret = data.frame( cbind(s, m, unique(my.data)));
names(ret) = c("s", "m", "t");
ret;
}
n = 50;
Npop = 1E3;
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
for ( mysd in mysds) {
#mu.vec = rlnorm(n, mean=2, sd=2) #linear m ~ t
mu.vec = rlnorm(n, mean=0.2, sd=1)
SystemAges = numeric(100);
for( i in 1: Npop){
componentAges =  rexp(n, rate=mu.vec);
summary(componentAges);
SystemAges[i] = floor( max(componentAges) + 0.5 );   #extreme value distribution??
}
tb = calculate.s.m( SystemAges )
sub = tb[ tb$s > 0.25, ]
sub$m[sub$m==0] = NA;
plot (log(sub$m) ~ sub$t, main = paste("sd=", mysd) )
plot( sub$s ~ sub$t, main=paste("sd=", mysd) )
}
rm(list=ls());
calculate.s.m = function( lifespan ){
my.data = sort( lifespan[!is.na(lifespan)] );
deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq)) {
deathCumulative[i] = deathCumulative[i-1] + deathCumulative[i]
}
tot = length(my.data)
s = 1 - deathCumulative/tot
currentLive  = tot - deathCumulative
m =  deathFreq / currentLive;
#list( s=s, t=unique(my.data));
ret = data.frame( cbind(s, m, unique(my.data)));
names(ret) = c("s", "m", "t");
ret;
}
n = 50; # numOfComponents
Npop = 1E3; # numOfSystems
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
for ( mysd in mysds) {
#mu.vec = rlnorm(n, mean=2, sd=2) #linear m ~ t
mu.vec = rlnorm(n, mean=0.2, sd=1) #sigmoidal s, and m
#mu.vec = rlnorm(n, mean=0.2, sd=0.2) #linear m ~ t, smaller variance -> more linear
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=1, sd=25)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=5)  #larger variance, linear log(m) ~ t!!!YES.
SystemAges = numeric(100);
for( i in 1: Npop){
componentAges =  rexp(n, rate=mu.vec);
summary(componentAges);
SystemAges[i] = floor( max(componentAges) + 0.5 );   #extreme value distribution??
}
tb = calculate.s.m( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.10, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste("sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
m = lm( log(sub$m) ~ sub$t )
abline(m, col="red")
summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste("sd=", mysd) )
}
?rlnorm
?rnorm
?floor
?round
rep(0.1,100)
?rpois
setwd("C:/Users/Jwill107/Desktop/Dropbox/JChristopherBio320-aging-modeling/1.current")
rm(list=ls());
calculate.s.m = function( lifespan ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq)) {
deathCumulative[i] = deathCumulative[i-1] + deathCumulative[i]
}
tot = length(my.data)
s = 1 - deathCumulative/tot
currentLive  = tot - deathCumulative
m =  deathFreq / currentLive;
#list( s=s, t=unique(my.data));
ret = data.frame( cbind(s, m, unique(my.data)));
names(ret) = c("s", "m", "t");
ret;
}
n = 50; # numOfComponents
Npop = 1E3; # numOfSystems
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
#mu.vec strores the constant failure rates of components
for ( mysd in mysds) {
#mu.vec = rlnorm(n, mean=2, sd=2) #linear m ~ t
mu.vec = rlnorm(n, mean=0.2, sd=1) #sigmoidal s, and m
#mu.vec = rep(0.1, 1000)
#mu.vec = rlnorm(n, mean=0.2, sd=0.2) #linear m ~ t, smaller variance -> more linear
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=1, sd=25)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=5)  #larger variance, linear log(m) ~ t!!!YES.
SystemAges = numeric(100); # large simulation runs (population size) is needed for presentaiton
for( i in 1: Npop){
componentAges =  rexp(n, rate=mu.vec);
summary(componentAges);
SystemAges[i] = floor( max(componentAges) + 0.5 );   #extreme value distribution??
# for smooth curves, use round( ?, digits=1)
}
tb = calculate.s.m( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.25, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste("sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
#m = lm( log(sub$m[sub$t<7]) ~ sub$t[sub$t<7] )
#abline(m, col="red")
#summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste("sd=", mysd) )
}
calculate.s.m
lifespan = rnorm(100, mean=50, sd=5)
lifespan
calculate.s.m = function( lifespan ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq)) {
deathCumulative[i] = deathCumulative[i-1] + deathCumulative[i]
}
tot = length(my.data)
s = 1 - deathCumulative/tot
currentLive  = tot - deathCumulative
m =  deathFreq / currentLive;
#list( s=s, t=unique(my.data));
ret = data.frame( cbind(s, m, unique(my.data)));
names(ret) = c("s", "m", "t");
ret;
}
calculate.s.m(lifespan)
result = calculate.s.m(lifespan)
str(result)
plot( result$s ~ result$t)
lines( result$m ~ result$t, col="red")
plot( log(result$m) ~ result$t, col="red")
rm(list=ls());
calculate.s.m = function( lifespan ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq)) {
deathCumulative[i] = deathCumulative[i-1] + deathCumulative[i]
}
tot = length(my.data)
s = 1 - deathCumulative/tot
currentLive  = tot - deathCumulative
m =  deathFreq / currentLive;
#list( s=s, t=unique(my.data));
ret = data.frame( cbind(s, m, unique(my.data)));
names(ret) = c("s", "m", "t");
ret;
}
n = 50; # numOfComponents
Npop = 1E3; # numOfSystems
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
#mu.vec strores the constant failure rates of components
for ( mysd in mysds) {
#mu.vec = rlnorm(n, mean=2, sd=2) #linear m ~ t
mu.vec = rlnorm(n, mean=0.2, sd=1) #sigmoidal s, and m
#mu.vec = rep(0.1, 1000)
#mu.vec = rlnorm(n, mean=0.2, sd=0.2) #linear m ~ t, smaller variance -> more linear
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=2)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=1, sd=25)  #larger variance, linear log(m) ~ t!!!YES.
#mu.vec = rlnorm(n, mean=0.1, sd=5)  #larger variance, linear log(m) ~ t!!!YES.
SystemAges = numeric(100); # large simulation runs (population size) is needed for presentaiton
for( i in 1: Npop){
componentAges =  rexp(n, rate=mu.vec);
summary(componentAges);
SystemAges[i] = floor( max(componentAges) + 0.5 );   #extreme value distribution??
# for smooth curves, use round( ?, digits=1)
}
tb = calculate.s.m( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.25, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste("sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
#m = lm( log(sub$m[sub$t<7]) ~ sub$t[sub$t<7] )
#abline(m, col="red")
#summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste("sd=", mysd) )
}
?calculate.s.m
??calculate.s.m
?sort
?!is.na()
?is.na()
setwd("C:/Users/Jwill107/Desktop/Genomics and Proteomics")
setwd("C:/Users/Jwill107/Desktop/Dropbox")
setwd("C:/Users/Jwill107/Desktop/Genomics and Proteomics")
data=read.csv("yates.miRNA.csv",row.names=1);
data=read.csv("yates.miRNA.csv",row.names=1);
data=read.csv("yates.miRNA.csv",row.names=1);
samples = colnames( data );
samples [grep( "RC.77",samples) ]
grep?
grep()?
?grep()
sub77 = data[, grep( "RC.77",samples) ];
sample77names = colnames( sub77 );
sub77 = sub77[, c(grep("Normal",sample77names), grep("Tumor", sample77names) )]
sub77 = data.frame(sub77);
for( i in 1:length(sub77[,1]) ) {
wt    = t( sub77[i, 1:3] );
tumor = t( sub77[i, 4:6] );
tt = t.test( wt, tumor);
sub77$p[i] = tt$p.value;
sub77$ratio[i] = mean(tumor) - mean(wt);
}
out001 = sub77[sub77$p<0.01, ]
plot( -log10(sub77$p) ~ sub77$ratio );
points( -log10(out001$p) ~ out001$ratio, col="red" );
write.csv(out001, "001.csv");
gasch = read.csv("gasch00.tab", sep="\t", header=T );
row.names(gasch) = gasch[,1]
sub.g = gasch[, seq(4,176)]
sub.g[ is.na(sub.g) ] = 0;
row.names(sub.g) = gasch[,1]
library(Heatplus);
source("http://bioconductor.org/biocLite.R")
biocLite("Heatplus")
gasch = read.csv("gasch00.tab", sep="\t", header=T );
setwd("C:/Users/Jwill107/Desktop/Genomics and Proteomics")
gasch = read.csv("gasch00.tab", sep="\t", header=T );
row.names(gasch) = gasch[,1]
sub.g = gasch[, seq(4,176)]
sub.g[ is.na(sub.g) ] = 0;
row.names(sub.g) = gasch[,1]
library(Heatplus);
data = t(sub.g[1:100,1:20])
heatmap_2(data);
heatmap_2(data, legend = 1 )
heatmap_2(data, legend = 1, col = RGBColVec(64) )
heatmap_2(data, legend = 1, col = rev(RGBColVec(64) ))
setwd("C:/Users/Jwill107/Desktop/Dropbox/JChristopherBio320-aging-modeling/1.current")
?numeric()
setwd("C:/Users/Jwill107/Desktop/Dropbox/JChristopherBio320-aging-modeling/1.current")
rm(list=ls());
mymodel = 'poisson'
#mymodel = 'Fixed#Elements'
calculate.s.m.v2 = function( lifespan, bin.size=10 ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
my.max = max(my.data)
my.interval.size = bin.size
deathFreq = c(NA, NA)
for ( i in 1:round(length(my.data) / my.interval.size))  {
sub = my.data[ ((i-1)* my.interval.size + 1) : (i* my.interval.size) ]
deathFreq = rbind( deathFreq, c(mean(sub, na.rm=T), my.interval.size) )
}
deathFreq = data.frame(deathFreq)
deathFreq = deathFreq[-1,] #remove NA
#deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq[,1])) {
deathCumulative[i, 2] = deathCumulative[i-1, 2] + deathCumulative[i, 2]
}
tot = length(my.data)
s = 1 - deathCumulative[,2]/tot
currentLive  = tot - deathCumulative[,2]
m =  deathFreq[,2] / currentLive;
#list( s=s, t=unique(my.data));
#ret = data.frame( cbind(s, m, unique(my.data)));
ret = data.frame( cbind(s, m, deathFreq[,1]) );
names(ret) = c("s", "m", "t");
ret;
}
#test
lifespan = rnorm(1000, mean=100, sd=10)
ret = calculate.s.m.v2(lifespan)
m = 15;  # numOfBlocks in a system
Npop = 1E4; # numOfSystems (individuals)
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
#mysds = c(0.2);
for ( mysd in mysds) { #sd loop
#containers
SystemAges = numeric(Npop);#store the lifespan for all individuals
BlockAges = numeric(m) #buffer for temporary storage
for( i in 1: Npop){  # i-th individual in the population
n = rpois(m, 600); # numOfElements for each individual
# this can be changed to power-law distribution
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
if (mymodel == 'Fixed#Elements' ) {
n = rep( 600, m )  #THis is the fixed number of elements per units
}
for( j in 1:m) {#Block loop
#mu.vec strores the constant failure rates of elements
#We are not sure whether mu.vec should be inside of Nop loop
#mu.vec = rlnorm(n[j], mean=0.005, sd=1) #Element constant mortality rates
#In GG01 paper, mu.vec are the same.
mu.vec = rep(0.005, n[j])
ElementAges =  rexp(n[j], rate=mu.vec);
#maximum of elelementAges -> BlackAges
BlockAges[j] = round( max(ElementAges), 1 );
}
SystemAges[i] = min(BlockAges)
}
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
tb = calculate.s.m.v2( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.25, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste(mymodel, " sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
#m = lm( log(sub$m[sub$t<7]) ~ sub$t[sub$t<7] )
#abline(m, col="red")
#summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste(mymodel, " sd=", mysd) )
}
View(sub)
# 2012, March 28,
# Use log-normal distribution to generate exponential rates
# Plan:
# simulated the life span of each elelment
# the maximal element is the life span of each block
# the minimum block lifespan is the life span of the system
# repeat for all systems (individuals in a population)
rm(list=ls());
mymodel = 'poisson'
#mymodel = 'Fixed#Elements'
calculate.s.m.v2 = function( lifespan, bin.size=10 ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
my.max = max(my.data)
my.interval.size = bin.size
deathFreq = c(NA, NA)
for ( i in 1:round(length(my.data) / my.interval.size))  {
sub = my.data[ ((i-1)* my.interval.size + 1) : (i* my.interval.size) ]
deathFreq = rbind( deathFreq, c(mean(sub, na.rm=T), my.interval.size) )
}
deathFreq = data.frame(deathFreq)
deathFreq = deathFreq[-1,] #remove NA
#deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq[,1])) {
deathCumulative[i, 2] = deathCumulative[i-1, 2] + deathCumulative[i, 2]
}
tot = length(my.data)
s = 1 - deathCumulative[,2]/tot
currentLive  = tot - deathCumulative[,2]
m =  deathFreq[,2] / currentLive;
#list( s=s, t=unique(my.data));
#ret = data.frame( cbind(s, m, unique(my.data)));
ret = data.frame( cbind(s, m, deathFreq[,1]) );
names(ret) = c("s", "m", "t");
ret;
}
#test
lifespan = rnorm(1000, mean=100, sd=10)
ret = calculate.s.m.v2(lifespan)
m = 15;  # numOfBlocks in a system
Npop = 1E4; # numOfSystems (individuals)
mymean = 0.1;
mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
#mysds = c(0.2);
for ( mysd in mysds) { #sd loop
#containers
SystemAges = numeric(Npop);#store the lifespan for all individuals
BlockAges = numeric(m) #buffer for temporary storage
for( i in 1: Npop){  # i-th individual in the population
n = rpois(m, 600); # numOfElements for each individual
# this can be changed to power-law distribution
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
if (mymodel == 'Fixed#Elements' ) {
n = rep( 600, m )  #THis is the fixed number of elements per units
}
for( j in 1:m) {#Block loop
#mu.vec strores the constant failure rates of elements
#We are not sure whether mu.vec should be inside of Nop loop
#mu.vec = rlnorm(n[j], mean=0.005, sd=1) #Element constant mortality rates
#In GG01 paper, mu.vec are the same.
mu.vec = rep(0.005, n[j])
ElementAges =  rexp(n[j], rate=mu.vec);
#maximum of elelementAges -> BlackAges
BlockAges[j] = round( max(ElementAges), 1 );
}
SystemAges[i] = min(BlockAges)
}
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
tb = calculate.s.m.v2( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.25, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste(mymodel, " sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
#m = lm( log(sub$m[sub$t<7]) ~ sub$t[sub$t<7] )
#abline(m, col="red")
#summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste(mymodel, " sd=", mysd) )
} #sd loop
#
# Change n = 5, 10, 15, 20, 40, 80, 160
#   and compare the slope of log(m) ~ t (which is G)
# 2012, March 28,
# Use log-normal distribution to generate exponential rates
# Plan:
# simulated the life span of each elelment
# the maximal element is the life span of each block
# the minimum block lifespan is the life span of the system
# repeat for all systems (individuals in a population)
rm(list=ls());
mymodel = 'poisson'
#mymodel = 'Fixed#Elements'
calculate.s.m.v2 = function( lifespan, bin.size=10 ){ #lifespan is simulated data
my.data = sort( lifespan[!is.na(lifespan)] );
my.max = max(my.data)
my.interval.size = bin.size
deathFreq = c(NA, NA)
for ( i in 1:round(length(my.data) / my.interval.size))  {
sub = my.data[ ((i-1)* my.interval.size + 1) : (i* my.interval.size) ]
deathFreq = rbind( deathFreq, c(mean(sub, na.rm=T), my.interval.size) )
}
deathFreq = data.frame(deathFreq)
deathFreq = deathFreq[-1,] #remove NA
#deathFreq       = table( my.data )
deathCumulative = deathFreq
for( i in 2:length(deathFreq[,1])) {
deathCumulative[i, 2] = deathCumulative[i-1, 2] + deathCumulative[i, 2]
}
tot = length(my.data)
s = 1 - deathCumulative[,2]/tot
currentLive  = tot - deathCumulative[,2]
m =  deathFreq[,2] / currentLive;
#list( s=s, t=unique(my.data));
#ret = data.frame( cbind(s, m, unique(my.data)));
ret = data.frame( cbind(s, m, deathFreq[,1]) );
names(ret) = c("s", "m", "t");
ret;
}
#test
lifespan = rnorm(1000, mean=100, sd=10)
ret = calculate.s.m.v2(lifespan)
m = 15;  # numOfBlocks in a system
Npop = 1E2; # numOfSystems (individuals)
mymean = 0.1;
#mysds = c(0.1, 0.3, 0.5, 1, 1.3, 1.5);
mysds = c(0.2);
for ( mysd in mysds) { #sd loop
#containers
SystemAges = numeric(Npop);#store the lifespan for all individuals
BlockAges = numeric(m) #buffer for temporary storage
for( i in 1: Npop){  # i-th individual in the population
n = rpois(m, 600); # numOfElements for each individual
# this can be changed to power-law distribution
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
if (mymodel == 'Fixed#Elements' ) {
n = rep( 600, m )  #THis is the fixed number of elements per units
}
for( j in 1:m) {#Block loop
#mu.vec strores the constant failure rates of elements
#We are not sure whether mu.vec should be inside of Nop loop
#mu.vec = rlnorm(n[j], mean=0.005, sd=1) #Element constant mortality rates
#In GG01 paper, mu.vec are the same.
mu.vec = rep(0.005, n[j])
ElementAges =  rexp(n[j], rate=mu.vec);
#maximum of elelementAges -> BlackAges
BlockAges[j] = round( max(ElementAges), 1 );
}
SystemAges[i] = min(BlockAges)
}
write.csv(n, "Gompertz.csv", row.names=F)
Gompertz = read.csv("Gompertz.csv")
tb = calculate.s.m.v2( SystemAges )
#sub = tb[1:floor(length(tb[,1])/4), ]
sub = tb[ tb$s > 0.25, ]
#with( sub, plot( m ~ t))
#with( sub, plot( s~ t ))
sub$m[sub$m==0] = NA;  #remove zero for log operations
plot (log(sub$m) ~ sub$t, main = paste(mymodel, " sd=", mysd) ) #plot the mortality ~ age
#m = with( sub, lm( log(m) ~ t) ); # linear regression
#m = lm( log(sub$m[sub$t<7]) ~ sub$t[sub$t<7] )
#abline(m, col="red")
#summary(lm( log(sub$m) ~ sub$t))
plot( sub$s ~ sub$t, main=paste(mymodel, " sd=", mysd) )
} #sd loop
#x axis is time, y axis is viability
#where log(sub$m) refers to failure rate graph
#where sub$s is viability (capacity for normal growth and development) graph
