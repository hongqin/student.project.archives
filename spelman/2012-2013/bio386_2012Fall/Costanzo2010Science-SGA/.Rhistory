#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
head(data)
# protein network in pairs of genes
pairs = read.csv("pairs.csv");
head(pairs)
#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
# protein network in pairs of genes
pairs = read.csv("pairs.csv");
#make sure gene names are treated as letters, not numbers
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# growth fitness data
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#####calculate the degree/connectivity (number of interactor per protein)
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
sum(degree); #check the counting result, the length of ids
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
head(net)
head(data)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, data$orfname);
lm( data$Ka ~ net$Freq)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, data$orfname);
? match
#let try a different way
data$orfname %in% net$id ;
positions =  data$orfname %in% net$id ;  # many true or false
str(positions)
net$Ka = data$Freq [match(net$Freq, data$Ka)]
net
net$Ka = data$Ka [match(net$id, data$orfname)]
head (net)
#visual examination
head(data)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
summary(lm(data$Ka ~ data$degree))
#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
# protein network in pairs of genes
pairs = read.csv("pairs.csv");
#make sure gene names are treated as letters, not numbers
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# growth fitness data
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#####calculate the degree/connectivity (number of interactor per protein)
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
sum(degree); #check the counting result, the length of ids
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#check network gene names match to gene names in the evolutionary data
intersect( net$id, data$orfname);
# try to do linear regression between evolutionary rate
# and number of interactions
lm( data$Ka ~ net$Freq) #won't work
#the above command does not work, beceause the data are in two spreadsheets
# and they are not matched.
#### Do informatics work to merge the dataset
#The evolutionary rate and degree are in separate spreadsheet. We need to put them together
#match data and net
# This match 'net$Freq' into 'data'
data$degree = net$Freq[match(data$orfname, net$id )]
#let try to match 'data$Ka' into 'net'
net$Ka = data$Ka [match(net$id, data$orfname)]
#You can also check the matches in a different way
positions =  data$orfname %in% net$id ;  # many true or false,
### comment: merge heterogenous dataset is an important practical skill.
#### end of merging
#visual examination
head(data)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
summary(lm(data$Ka ~ data$degree))
plot( data$Ka ~ data$degree); #this is figure 1
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(data$Ka ~ data$degree
summary(m))
plot( data$Ka ~ data$degree); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(data$Ka ~ data$degree
summary(m))
plot( data$Ka ~ data$degree); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(data$Ka ~ data$degree)
summary(m))
plot( data$Ka ~ data$degree); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
plot( data$Ka ~ data$degree, xlab='interaction per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(data$Ka ~ data$degree)
summary(m))
plot( data$Ka ~ data$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(data$Ka ~ data$degree);
summary(m)
plot( data$Ka ~ data$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures-and-labs/4.fraser.paper/PIN.KaKs")
#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
#now study the data tables with 'head' and 'str'
# ... ....
str(data)
str(pairs)
#make sure gene names are treated as letters, not numbers
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
#now study the data tables with 'head' and 'str'
# ... ....
str(pairs)
#make sure gene names are treated as letters, not numbers
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ...
str(pairs)
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures-and-labs/4.fraser.paper/PIN.KaKs")
#data, evolutionary rates
data = read.csv( "Sce.Spa.KaKs.csv");
View(data)
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
View(pairs)
#now study the data tables with 'head' and 'str'
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
str(pairs)
str(data)
data$orfname = as.character(data$orfname)
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
View(fit)
head(fit)
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#####calculate the degree/connectivity (number of interactor per protein)
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
sum(degree); #check the counting result, the length of ids
View(fit)
fix(degree)
head(degree)
str(degree)
sum(degree); #check the counting result, the length of ids
length(ids)
head(data)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
head(net)
net$id = as.character( net$ids); #make sure gene names are "characters"
head(net)
net$id = as.character( net$ids); #make sure gene names are "characters"
str(net)
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
str(net)
str(data)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, data$orfname);
? match
setwd("~/Dropbox/shared.dropbox/students.dp/bio386_2012Fall/Costanzo2010Science-SGA")
tb = read.delim("sga.txt", header=F,)
setwd("~/Dropbox/shared.dropbox/students.dp/bio386_2012Fall/Costanzo2010Science-SGA")
tb = read.delim("sga.txt", header=F,)
system("ls")
tb = read.delim("sgadata_costanzo2009_stringentCutoff_101120.txt", header=F,)
head(tb)
str(tb)
names(tb) = c("ORF1", "name1", "ORF2", "name2", NA, NA, NA)
head(tb)
